import {
  core.binary {binary},
  core.binary-builder {extract},
  core.binary.io,
  core.file {close, open},
  core.file.flag {for-rw},
  core.file.mode {default-file-mode},
  core.system {system},
  this.make-put-kit {make-put-kit},
  this.put-kit {Put-Kit, put-kit},
  this.sero {Sero, sero},
}

define _extract-binary(k: put-kit): binary {
  let Put-Kit of {buffer} = k;
  extract(buffer)
}

define encode<a>(m: sero(a), value: &a, buffer-size: int): binary {
  let h = make-put-kit(buffer-size);
  let _ on h = {
    let Sero of {put} = m;
    put(h, value)
  };
  _extract-binary(h)
}

define encode-file<a>(m: sero(a), value: &a, buffer-size: int, path: &text): system(unit) {
  pin bytes = encode(m, value, buffer-size);
  try target-file = open(path, for-rw, default-file-mode);
  try _ = core.binary.io.write(target-file, bytes);
  close(target-file)
}
