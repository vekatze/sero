import {
  core.int.io {print-int-line},
  core.list {for},
  this.common.get {get-int8},
  this.common.put {put-int8},
  this.decode {decode},
  this.encode {encode},
  this.instance.int64 {int64-sero},
  this.get-kit {get-kit},
  this.put-kit {put-kit},
  this.sero {Sero, sero},
}

inline _put<a>(!m: sero(a)): (k: &put-kit, xs: &list(a)) -> unit {
  define self(k, xs): unit {
    case xs {
    | Nil =>
      put-int8(k, 0)
    | Cons(y, ys) =>
      let Sero of {put} = !m;
      put-int8(k, 1);
      put(k, y);
      self(k, ys)
    }
  }
}

inline _get<a>(!m: sero(a)): (k: &get-kit) -> ?meta list(a) {
  define self(k) {
    try tag = get-int8(k);
    if eq-int8(tag, 0) {
      Right(box {Nil})
    } else-if eq-int8(tag, 1) {
      let Sero of {get} = !m;
      try v = get(k);
      try vs = self(k);
      Right(box {
        letbox v' = v;
        letbox vs' = vs;
        Cons(v', vs')
      })
    } else {
      none
    }
  }
}

inline list-sero<a>(!m: sero(a)): sero(list(a)) {
  Sero of {
    put := _put(!m),
    get := _get(!m),
  }
}

inline _list-int-sero: sero(list(int)) {
  list-sero(int64-sero)
}

define zen(): unit {
  pin val = List[1, 2, -123, 1384910234];
  match decode(_list-int-sero, encode(_list-int-sero, val, 8)) {
  | Left(_) =>
    print("left\n")
  | Right(vs) =>
    print("int-list\n");
    for(vs, function (v) {
      print("val: ");
      print-int-line(v);
    })
  }
}
