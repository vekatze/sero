import {
  core.box {axiom-T},
  core.control {grow-E},
  core.int.io {print-int-line},
  core.vector {push-back},
  this.common.get {get-int64},
  this.common.put {put-int64},
  this.decode {decode},
  this.encode {encode},
  this.instance.int64 {int64-sero},
  this.get-kit {get-kit},
  this.put-kit {put-kit},
  this.sero {Sero, sero},
}

inline _put<a>(m: sero(a)): (k: &put-kit, xs: &vector(a)) -> unit {
  function (k, xs) {
    let len = core.vector.length(xs);
    put-int64(k, len);
    core.vector.for-N(xs, function (x, _) {
      let Sero of {put} = m;
      put(k, x)
    })
  }
}

inline _get<a>(m: sero(a)): (k: &get-kit) -> ?meta vector(a) {
  function (k) {
    try len = get-int64(k);
    let Sero of {get} = m;
    let base: vector(a) = core.vector.make(len);
    try item =
      grow-E(base, len, function (acc, _) {
        try value = get(k);
        Right(push-back(acc, axiom-T(value)))
      });
    Right(magic cast(vector(a), meta vector(a), item))
  }
}

inline vector-sero<a>(!m: sero(a)): sero(vector(a)) {
  Sero of {
    put := _put(!m),
    get := _get(!m),
  }
}

inline _int-vector: sero(vector(int)) {
  vector-sero(int64-sero)
}

define zen(): unit {
  pin val = core.vector.from-list(List[1, 2, -123, 1384910234]);
  match decode(_int-vector, encode(_int-vector, val, 8)) {
  | Left(_) =>
    print("left\n")
  | Right(vs) =>
    print("int-vector\n");
    pin vs = vs;
    core.vector.for-N(vs, function (v, _) {
      print("val: ");
      print-int-line(*v);
    })
  }
}
