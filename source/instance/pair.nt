import {
  core.bool.show,
  core.int.io {print-int-line},
  core.text.io {print-line},
  this.decode {decode},
  this.encode {encode},
  this.get-kit {get-kit},
  this.instance.bool {bool-sero},
  this.instance.int64 {int64-sero},
  this.put-kit {put-kit},
  this.sero {Sero, sero},
}

inline _put<a, b>(m1: sero(a), m2: sero(b)): (k: &put-kit, xy: &pair(a, b)) -> unit {
  function (k, xy) {
    tie Pair(x, y) = xy;
    let Sero of {put := put1} = m1;
    let Sero of {put := put2} = m2;
    put1(k, x);
    put2(k, y)
  }
}

inline _get<a, b>(m1: sero(a), m2: sero(b)): (k: &get-kit) -> ?meta pair(a, b) {
  function (k) {
    let Sero of {get := get1} = m1;
    let Sero of {get := get2} = m2;
    try l = get1(k);
    try r = get2(k);
    Right(box {
      letbox l' = l;
      letbox r' = r;
      Pair(l', r')
    })
  }
}

inline pair-sero<a, b>(!m1: sero(a), !m2: sero(b)): sero(pair(a, b)) {
  Sero of {
    put := _put(!m1, !m2),
    get := _get(!m1, !m2),
  }
}

inline _pair-int-bool: sero(pair(int, bool)) {
  pair-sero(int64-sero, bool-sero)
}

define zen(): unit {
  pin val = Pair(-1234, True);
  match decode(_pair-int-bool, encode(_pair-int-bool, val, 8)) {
  | Left(_) =>
    print("left\n")
  | Right(xy) =>
    let Pair(x, y) = xy;
    print("int: ");
    print-int-line(x);
    print("bool: ");
    pin y = core.bool.show.show(y);
    print-line(y);
  }
}
