import {
  core.binary {binary},
  core.binary.io,
  core.file {close, open},
  core.file.flag {for-r},
  core.system {system},
  this.move.make-get-kit {make-get-kit},
  this.rule.sero {Sero, sero},
}

define decode<a>(m: sero(a), bytes: binary): ?a {
  let Sero of {get} = m;
  let h = make-get-kit(bytes);
  letbox-T result on h =
    match get(h) {
    | Left(_) =>
      box {none}
    | Right(v) =>
      box {
        letbox v' = v;
        Right(v')
      }
    };
  let _ = h;
  result
}

define decode-file<a>(m: sero(a), path: &text): system(?a) {
  try source-file = open(path, for-r, Nil);
  try bytes = core.binary.io.read(source-file, 1024);
  try _ = close(source-file);
  Right(decode(m, bytes))
}
