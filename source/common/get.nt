import {
  core.binary {binary, binary-length},
  core.box {axiom-T},
  core.c-size {C-Size},
  core.cell {mutate},
  core.external {malloc},
  core.memory {load-float, load-int, load-int16, load-int32, load-int8, store-int},
  core.pointer {shift},
  core.text {_Text},
  this.get-kit {Get-Kit, get-kit},
}

define _proceed(cursor: &cell(int), offset: int): unit {
  mutate(cursor, function (x) {
    quote {add-int(axiom-T(x), offset)}
  })
}

define _get-ptr(bytes: &binary, cursor: int, elem-size: int): ?pointer {
  if lt-int(binary-length(bytes), add-int(cursor, elem-size)) {
    none
  } else {
    Right(shift(core.binary._get-content-pointer(bytes), cursor))
  }
}

inline _get<a>(k: &get-kit, size: int, loader: (pointer) -> a): ?a {
  tie Get-Kit of {bytes, cursor} = k;
  let c = core.cell.clone(cursor);
  try ptr = _get-ptr(bytes, c, size);
  let result = loader(ptr);
  _proceed(cursor, size);
  Right(result)
}

define get-int8(k: &get-kit): ?int8 {
  _get(k, 1, load-int8)
}

define get-int16(k: &get-kit): ?int16 {
  _get(k, 2, load-int16)
}

define get-int32(k: &get-kit): ?int32 {
  _get(k, 4, load-int32)
}

define get-int64(k: &get-kit): ?int64 {
  _get(k, 8, load-int)
}

define get-float16(k: &get-kit): ?float16 {
  _get(k, 2, function (p) {
    magic load(float16, p)
  })
}

define get-float32(k: &get-kit): ?float32 {
  _get(k, 4, function (p) {
    magic load(float32, p)
  })
}

define get-float64(k: &get-kit): ?float64 {
  _get(k, 8, load-float)
}

define get-binary(k: &get-kit): ?binary {
  tie Get-Kit of {bytes, cursor} = k;
  let c = core.cell.clone(cursor);
  try p = _get-ptr(bytes, c, 8);
  let len = load-int(p);
  let result-pointer = malloc(C-Size(add-int(len, 16)));
  store-int(0, result-pointer);
  store-int(len, shift(result-pointer, 8));
  core.binary._copy-binary(shift(p, 8), shift(result-pointer, 16), len);
  _proceed(cursor, add-int(len, 8));
  let result = magic cast(pointer, binary, result-pointer);
  Right(result)
}

define get-text(k: &get-kit): ?text {
  try b = get-binary(k);
  Right(_Text(b))
}
